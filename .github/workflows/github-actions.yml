name: Build and Publish - Templates VncsRaniery

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]

permissions:
  id-token: write # Required for OIDC
  contents: write # Required for creating tags and releases

jobs:
  build-website:
    name: Build Website
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch complete history for better diff comparisons

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Update npm
        run: npm install -g npm@latest

      - name: Install dependencies
        run: |
          cd website
          npm ci

      - name: Run linting
        run: |
          cd website
          npm run lint

      - name: Build website
        run: |
          cd website
          npm run build

  check-changes:
    name: Check for Changes
    runs-on: ubuntu-latest
    outputs:
      should-publish: ${{ steps.changes.outputs.should-publish }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for package changes
        id: changes
        run: |
          # Verificar se há mudanças nos arquivos do package
          if git diff --quiet HEAD~1 HEAD -- index.js package.json templates/; then
            echo "should-publish=false" >> $GITHUB_OUTPUT
            echo "No changes detected in package files, skipping publish"
          else
            echo "should-publish=true" >> $GITHUB_OUTPUT
            echo "Changes detected in package files, proceeding with publish"
          fi

  publish-package:
    name: Publish Package to NPM
    runs-on: ubuntu-latest
    needs: [build-website, check-changes]
    if: needs.check-changes.outputs.should-publish == 'true' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Update npm
        run: npm install -g npm@latest

      - name: Install dependencies
        run: npm ci

      - name: Check NPM token
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "❌ NPM_TOKEN secret is not configured"
            echo "Please configure the NPM_TOKEN secret in repository settings"
            exit 1
          else
            echo "✅ NPM_TOKEN is configured"
          fi

      - name: Run build
        run: npm run build --if-present

      - name: Run tests
        run: npm test || echo "No tests found, continuing..."

      - name: Bump version and create tag
        id: version
        run: |
          # Configurar Git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Obter versão atual
          CURRENT_VERSION=$(npm pkg get version | tr -d '"')
          echo "Current version: $CURRENT_VERSION"

          # Incrementar versão patch
          NEW_VERSION=$(npm version patch --no-git-tag-version)
          echo "New version: $NEW_VERSION"

          # Verificar se a tag já existe no repositório remoto
          if git ls-remote --tags origin | grep -q "refs/tags/$NEW_VERSION$"; then
            echo "⚠️  Tag $NEW_VERSION already exists in remote repository"
            echo "🔄 Skipping tag creation and using existing tag"
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "tag=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "✅ Creating new tag $NEW_VERSION"
            # Criar tag Git
            git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
            git push origin "$NEW_VERSION"
            
            # Salvar versão para uso posterior
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "tag=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        uses: actions/npm-publish@v1
        with:
          access: public
          token: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            🚀 **Release ${{ steps.version.outputs.version }}**

            ## 📦 Package Published
            - **NPM**: [create-templates-vncsraniery@${{ steps.version.outputs.version }}](https://www.npmjs.com/package/create-templates-vncsraniery)

            ## 🔄 Changes
            - Website build updated
            - Package published to NPM
            - Version automatically bumped

            ## 📋 Usage
            ```bash
            npx create-templates-vncsraniery@${{ steps.version.outputs.version }} add landing-01
            ```

            ---
            *This release was created automatically by GitHub Actions*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
